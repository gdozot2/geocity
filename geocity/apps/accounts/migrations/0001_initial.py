# Generated by Django 3.2.15 on 2022-10-13 11:43

import django.contrib.gis.db.models.fields
import django.core.validators
import django.db.models.deletion
import simple_history.models
import taggit.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("sites", "0002_alter_domain_unique"),
        ("taggit", "0004_alter_taggeditem_content_type_alter_taggeditem_tag"),
    ]

    operations = [
        migrations.CreateModel(
            name="AdministrativeEntity",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=128, verbose_name="name")),
                ("ofs_id", models.PositiveIntegerField(verbose_name="Numéro OFS")),
                ("link", models.URLField(blank=True, verbose_name="Lien")),
                (
                    "archive_link",
                    models.URLField(
                        blank=True, max_length=1024, verbose_name="Archives externes"
                    ),
                ),
                (
                    "general_informations",
                    models.CharField(
                        blank=True, max_length=1024, verbose_name="Informations"
                    ),
                ),
                (
                    "custom_signature",
                    models.TextField(
                        blank=True,
                        help_text="Si vide, le nom de l'entité sera utilisé",
                        max_length=1024,
                        verbose_name="Signature des emails",
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Seuls les chiffres et les espaces sont autorisés.",
                                regex="^(((\\+41)\\s?)|(0))?(\\d{2})\\s?(\\d{3})\\s?(\\d{2})\\s?(\\d{2})$",
                            )
                        ],
                        verbose_name="Téléphone",
                    ),
                ),
                (
                    "additional_searchtext_for_address_field",
                    models.CharField(
                        blank=True,
                        help_text='Ex: "Yverdon-les-Bains" afin de limiter les recherches à Yverdon, <a href="https://api3.geo.admin.ch/services/sdiservices.html#search" target="_blank">Plus d\'informations</a>',
                        max_length=255,
                        verbose_name="Filtre additionnel pour la recherche d'adresse",
                    ),
                ),
                (
                    "geom",
                    django.contrib.gis.db.models.fields.MultiPolygonField(
                        null=True, srid=2056, verbose_name="geom"
                    ),
                ),
                (
                    "expeditor_name",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        verbose_name="Nom de l'expéditeur des notifications",
                    ),
                ),
                (
                    "expeditor_email",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Le format de l'adresse email n'est pas valable.",
                                regex="^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,63}$",
                            )
                        ],
                        verbose_name="Adresse email de l'expéditeur des notifications",
                    ),
                ),
            ],
            options={
                "verbose_name": "1.1 Configuration de l'entité administrative (commune, organisation)",
                "verbose_name_plural": "1.1 Configuration des entités administratives (commune, organisation)",
                "permissions": [
                    ("see_private_requests", "Voir les demandes restreintes")
                ],
            },
        ),
        migrations.CreateModel(
            name="HistoricalUserProfile",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "company_name",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Raison Sociale"
                    ),
                ),
                (
                    "vat_number",
                    models.CharField(
                        blank=True,
                        max_length=19,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Le code d'entreprise doit être de type                          CHE-123.456.789 (TVA)                          et vous pouvez le trouver sur                          le registre fédéral des entreprises                          https://www.uid.admin.ch/search.aspx",
                                regex="^(CHE-)+\\d{3}\\.\\d{3}\\.\\d{3}(\\sTVA)?$",
                            )
                        ],
                        verbose_name="Numéro TVA",
                    ),
                ),
                ("address", models.CharField(max_length=100, verbose_name="Rue")),
                (
                    "zipcode",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1000),
                            django.core.validators.MaxValueValidator(9999),
                        ],
                        verbose_name="NPA",
                    ),
                ),
                ("city", models.CharField(max_length=100, verbose_name="Ville")),
                (
                    "phone_first",
                    models.CharField(
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Seuls les chiffres et les espaces sont autorisés.",
                                regex="^(((\\+41)\\s?)|(0))?(\\d{2})\\s?(\\d{3})\\s?(\\d{2})\\s?(\\d{2})$",
                            )
                        ],
                        verbose_name="Téléphone principal",
                    ),
                ),
                (
                    "phone_second",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Seuls les chiffres et les espaces sont autorisés.",
                                regex="^(((\\+41)\\s?)|(0))?(\\d{2})\\s?(\\d{3})\\s?(\\d{2})\\s?(\\d{2})$",
                            )
                        ],
                        verbose_name="Téléphone secondaire",
                    ),
                ),
                (
                    "iban",
                    models.CharField(
                        blank=True,
                        help_text="A remplir uniquement pour les prestations liées à un remboursement (le titulaire du compte doit correspondre aux informations indiquées ci-dessus).",
                        max_length=30,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="L'IBAN doit être de type CH12 3456 7890 1234 5678 9",
                                regex="^[A-Z]{2}[0-9]{2}(?:[ ]?[0-9A-Z]{4}){4}(?:[ ]?[0-9]{1,2})?$",
                            )
                        ],
                        verbose_name="IBAN",
                    ),
                ),
                (
                    "notify_per_email",
                    models.BooleanField(
                        default=True, verbose_name="Me notifier par e-mail"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical 3.2 Consultation de l'auteur",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="PermitDepartment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        default="Service", max_length=100, verbose_name="description"
                    ),
                ),
                (
                    "is_validator",
                    models.BooleanField(
                        help_text="Cocher si les membres doivent apparaître dans la liste des services consultables pour la validation",
                        verbose_name="validateur",
                    ),
                ),
                (
                    "is_backoffice",
                    models.BooleanField(
                        default=False,
                        help_text="Cocher si les membres font partie du secrétariat. Ils seront notifiés des évolutions de la demande",
                        verbose_name="secrétariat",
                    ),
                ),
                (
                    "is_default_validator",
                    models.BooleanField(
                        default=False,
                        verbose_name="sélectionné par défaut pour les validations",
                    ),
                ),
                (
                    "integrator",
                    models.IntegerField(
                        default=0,
                        help_text="Identifiant du groupe",
                        verbose_name="Groupe des administrateurs",
                    ),
                ),
                (
                    "is_integrator_admin",
                    models.BooleanField(
                        default=False,
                        help_text="Cocher si les membres peuvent accéder à l'admin de Django",
                        verbose_name="Intégrateur",
                    ),
                ),
                (
                    "mandatory_2fa",
                    models.BooleanField(
                        default=False,
                        help_text="Cocher si les membres doivent obligatoirement utiliser la double authentification",
                        verbose_name="2FA obligatoire",
                    ),
                ),
                (
                    "integrator_email_domains",
                    models.CharField(
                        blank=True,
                        help_text="Liste de domaines séparés par des virgules ',' correspondant aux utilisateurs rattachés à l'entité administrative (ex: ma-commune.ch,commune.ch)",
                        max_length=254,
                        verbose_name="Domaines d'emails visibles pour l'intégrateur",
                    ),
                ),
                (
                    "integrator_emails_exceptions",
                    models.CharField(
                        blank=True,
                        help_text="Liste d'emails séparés par des virgules ',' d'utilisateurs spécifiques rattachés à l'entité administrative (ex: greffe@nowhere.com)",
                        max_length=254,
                        verbose_name="Emails complets visibles pour l'intégrateur",
                    ),
                ),
            ],
            options={
                "verbose_name": "2.1 Configuration du service (pilote, validateur...)",
                "verbose_name_plural": "2.1 Configuration des services (pilote, validateur...)",
            },
        ),
        migrations.CreateModel(
            name="SiteProfile",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
            options={
                "verbose_name": "Configuration de l'intégrateur",
                "verbose_name_plural": "Configuration de l'intégrateur",
            },
        ),
        migrations.CreateModel(
            name="TemplateCustomization",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "templatename",
                    models.CharField(
                        blank=True,
                        help_text="Permettant d'afficher la page de login par l'url: https://geocity.ch/?template=vevey",
                        max_length=64,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Seuls les caractères sans accents et les chiffres sont autorisés. Les espaces et autres caractères spéciaux ne sont pas autorisés",
                                regex="^[a-zA-Z0-9_]*$",
                            )
                        ],
                        verbose_name="Identifiant",
                    ),
                ),
                (
                    "application_title",
                    models.CharField(blank=True, max_length=255, verbose_name="Titre"),
                ),
                (
                    "application_subtitle",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Sous-titre"
                    ),
                ),
                (
                    "application_description",
                    models.TextField(
                        blank=True, max_length=2048, verbose_name="Description"
                    ),
                ),
                (
                    "background_image",
                    models.ImageField(
                        blank=True,
                        upload_to="background_images/",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["svg", "png", "jpg", "jpeg"]
                            )
                        ],
                        verbose_name="Image de fond",
                    ),
                ),
            ],
            options={
                "verbose_name": "4.1 Configuration de la page de login",
                "verbose_name_plural": "4.1 Configuration des pages de login",
            },
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "company_name",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Raison Sociale"
                    ),
                ),
                (
                    "vat_number",
                    models.CharField(
                        blank=True,
                        max_length=19,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Le code d'entreprise doit être de type                          CHE-123.456.789 (TVA)                          et vous pouvez le trouver sur                          le registre fédéral des entreprises                          https://www.uid.admin.ch/search.aspx",
                                regex="^(CHE-)+\\d{3}\\.\\d{3}\\.\\d{3}(\\sTVA)?$",
                            )
                        ],
                        verbose_name="Numéro TVA",
                    ),
                ),
                ("address", models.CharField(max_length=100, verbose_name="Rue")),
                (
                    "zipcode",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1000),
                            django.core.validators.MaxValueValidator(9999),
                        ],
                        verbose_name="NPA",
                    ),
                ),
                ("city", models.CharField(max_length=100, verbose_name="Ville")),
                (
                    "phone_first",
                    models.CharField(
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Seuls les chiffres et les espaces sont autorisés.",
                                regex="^(((\\+41)\\s?)|(0))?(\\d{2})\\s?(\\d{3})\\s?(\\d{2})\\s?(\\d{2})$",
                            )
                        ],
                        verbose_name="Téléphone principal",
                    ),
                ),
                (
                    "phone_second",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Seuls les chiffres et les espaces sont autorisés.",
                                regex="^(((\\+41)\\s?)|(0))?(\\d{2})\\s?(\\d{3})\\s?(\\d{2})\\s?(\\d{2})$",
                            )
                        ],
                        verbose_name="Téléphone secondaire",
                    ),
                ),
                (
                    "iban",
                    models.CharField(
                        blank=True,
                        help_text="A remplir uniquement pour les prestations liées à un remboursement (le titulaire du compte doit correspondre aux informations indiquées ci-dessus).",
                        max_length=30,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="L'IBAN doit être de type CH12 3456 7890 1234 5678 9",
                                regex="^[A-Z]{2}[0-9]{2}(?:[ ]?[0-9A-Z]{4}){4}(?:[ ]?[0-9]{1,2})?$",
                            )
                        ],
                        verbose_name="IBAN",
                    ),
                ),
                (
                    "notify_per_email",
                    models.BooleanField(
                        default=True, verbose_name="Me notifier par e-mail"
                    ),
                ),
                (
                    "administrative_entity",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="anonymous_user",
                        to="accounts.administrativeentity",
                        verbose_name="entité administrative",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "3.2 Consultation de l'auteur",
                "verbose_name_plural": "3.2 Consultation des auteurs",
            },
        ),
        migrations.AddConstraint(
            model_name="templatecustomization",
            constraint=models.UniqueConstraint(
                fields=("templatename",), name="unique_template_name"
            ),
        ),
        migrations.AddField(
            model_name="siteprofile",
            name="integrator",
            field=models.ForeignKey(
                default=None,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="site_profiles",
                to="auth.group",
                verbose_name="Intégrateur",
            ),
        ),
        migrations.AddField(
            model_name="siteprofile",
            name="site",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="site_profile",
                to="sites.site",
            ),
        ),
        migrations.AddField(
            model_name="permitdepartment",
            name="administrative_entity",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="departments",
                to="accounts.administrativeentity",
                verbose_name="entité administrative",
            ),
        ),
        migrations.AddField(
            model_name="permitdepartment",
            name="group",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="permit_department",
                to="auth.group",
            ),
        ),
        migrations.AddField(
            model_name="historicaluserprofile",
            name="administrative_entity",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="accounts.administrativeentity",
                verbose_name="entité administrative",
            ),
        ),
        migrations.AddField(
            model_name="historicaluserprofile",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicaluserprofile",
            name="user",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="administrativeentity",
            name="integrator",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="auth.group",
                verbose_name="Groupe des administrateurs",
            ),
        ),
        migrations.AddField(
            model_name="administrativeentity",
            name="sites",
            field=models.ManyToManyField(
                related_name="_accounts_administrativeentity_sites_+",
                to="sites.Site",
                verbose_name="Détails du Site",
            ),
        ),
        migrations.AddField(
            model_name="administrativeentity",
            name="tags",
            field=taggit.managers.TaggableManager(
                blank=True,
                help_text="Mots clefs sans espaces, séparés par des virgules permettant de filtrer les entités par l'url: https://geocity.ch/?entityfilter=yverdon",
                through="taggit.TaggedItem",
                to="taggit.Tag",
                verbose_name="Mots-clés",
            ),
        ),
    ]
