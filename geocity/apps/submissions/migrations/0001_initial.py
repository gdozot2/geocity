# Generated by Django 3.2.15 on 2022-10-13 13:29

import django.contrib.gis.db.models.fields
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import simple_history.models
from django.conf import settings
from django.db import migrations, models

import geocity.apps.submissions.fields
import geocity.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("forms", "0001_initial"),
        ("reports", "0009_add_section_creditor"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("auth", "0012_alter_user_first_name_max_length"),
        ("accounts", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="ComplementaryDocumentType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="nom")),
                (
                    "form",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="document_types",
                        to="forms.form",
                        verbose_name="Formulaires",
                    ),
                ),
                (
                    "integrator",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="document_types",
                        to="auth.group",
                        verbose_name="Groupe des administrateurs",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="submissions.complementarydocumenttype",
                        verbose_name="Type parent",
                    ),
                ),
                (
                    "reports",
                    models.ManyToManyField(
                        blank=True,
                        related_name="_submissions_complementarydocumenttype_reports_+",
                        to="reports.Report",
                    ),
                ),
            ],
            options={
                "verbose_name": "1.7 Configuration du type de document",
                "verbose_name_plural": "1.7 Configuration des types de document",
            },
        ),
        migrations.CreateModel(
            name="Contact",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("first_name", models.CharField(max_length=150, verbose_name="Prénom")),
                ("last_name", models.CharField(max_length=100, verbose_name="Nom")),
                (
                    "company_name",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Entreprise"
                    ),
                ),
                (
                    "vat_number",
                    models.CharField(
                        blank=True, max_length=19, verbose_name="Numéro TVA"
                    ),
                ),
                ("address", models.CharField(max_length=100, verbose_name="Adresse")),
                ("zipcode", models.PositiveIntegerField(verbose_name="NPA")),
                ("city", models.CharField(max_length=100, verbose_name="Ville")),
                ("phone", models.CharField(max_length=20, verbose_name="Téléphone")),
                ("email", models.EmailField(max_length=254, verbose_name="Email")),
            ],
            options={
                "verbose_name": "Contact",
            },
        ),
        migrations.CreateModel(
            name="GeomLayer",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "layer_name",
                    models.CharField(
                        blank=True,
                        max_length=128,
                        verbose_name="Nom de la couche source",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True, max_length=1024, verbose_name="Commentaire"
                    ),
                ),
                (
                    "source_id",
                    models.CharField(
                        blank=True, max_length=128, verbose_name="Id entité"
                    ),
                ),
                (
                    "source_subid",
                    models.CharField(
                        blank=True, max_length=128, verbose_name="Id entité secondaire"
                    ),
                ),
                (
                    "external_link",
                    models.URLField(blank=True, verbose_name="Lien externe"),
                ),
                (
                    "geom",
                    django.contrib.gis.db.models.fields.MultiPolygonField(
                        null=True, srid=2056, verbose_name="Géométrie"
                    ),
                ),
            ],
            options={
                "verbose_name": "3.4 Consultation de l'entité géographique à intersecter",
                "verbose_name_plural": "3.4 Consultation des entités géographiques à intersecter",
            },
        ),
        migrations.CreateModel(
            name="SelectedForm",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "form",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="selected_forms",
                        to="forms.form",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Submission",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "Brouillon"),
                            (1, "Envoyée, en attente de traitement"),
                            (4, "Demande de compléments"),
                            (3, "En traitement"),
                            (5, "En validation"),
                            (2, "Approuvée"),
                            (6, "Refusée"),
                            (7, "Réceptionnée"),
                            (8, "Consultation publique en cours"),
                            (9, "Archivée"),
                        ],
                        default=0,
                        verbose_name="état",
                    ),
                ),
                (
                    "shortname",
                    models.CharField(
                        blank=True,
                        help_text="Sera affiché dans le calendrier si la demande est rendue tout publique, ex: Brandons (max. 32 caractères)",
                        max_length=32,
                        verbose_name="nom court",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        verbose_name="date de création",
                    ),
                ),
                (
                    "validated_at",
                    models.DateTimeField(null=True, verbose_name="date de validation"),
                ),
                (
                    "intersected_geometries",
                    models.TextField(
                        max_length=1024,
                        null=True,
                        verbose_name="Entités géométriques concernées",
                    ),
                ),
                (
                    "validation_pdf",
                    geocity.apps.submissions.fields.SubmissionFileField(
                        storage=geocity.fields.PrivateFileSystemStorage(),
                        upload_to="validations",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["pdf"]
                            )
                        ],
                        verbose_name="pdf de validation",
                    ),
                ),
                (
                    "creditor_type",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (7, "Architecte/Ingénieur"),
                            (6, "Association"),
                            (0, "Autres"),
                            (8, "Direction des travaux"),
                            (3, "Entreprise"),
                            (4, "Maître d'ouvrage"),
                            (2, "Propriétaire"),
                            (1, "Requérant (si différent de l'auteur de la demande)"),
                            (5, "Sécurité"),
                        ],
                        null=True,
                        verbose_name="Destinataire de la facture",
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False, verbose_name="Publication calendrier"
                    ),
                ),
                (
                    "prolongation_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Nouvelle date de fin"
                    ),
                ),
                (
                    "prolongation_comment",
                    models.TextField(blank=True, verbose_name="Commentaire"),
                ),
                (
                    "prolongation_status",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[(0, "En attente"), (1, "Approuvée"), (2, "Refusée")],
                        null=True,
                        verbose_name="Décision",
                    ),
                ),
                (
                    "additional_decision_information",
                    models.TextField(
                        blank=True,
                        help_text="Facultative, sera transmise au requérant",
                        max_length=2048,
                        verbose_name="Information complémentaire",
                    ),
                ),
                (
                    "administrative_entity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submissions",
                        to="accounts.administrativeentity",
                        verbose_name="entité administrative",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="submissions",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="auteur",
                    ),
                ),
            ],
            options={
                "verbose_name": "3.1 Consultation de la demande",
                "verbose_name_plural": "3.1 Consultation des demandes",
                "permissions": [
                    ("amend_submission", "Traiter les demandes de permis"),
                    ("validate_submission", "Valider les demandes de permis"),
                    ("classify_submission", "Classer les demandes de permis"),
                    ("edit_submission", "Éditer les demandes de permis"),
                    ("view_private_submission", "Voir les demandes restreintes"),
                ],
                "verbose_name": "3.1 Consultation de la demande",
                "verbose_name_plural": "3.1 Consultation des demandes",
            },
        ),
        migrations.CreateModel(
            name="SubmissionAmendField",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="nom")),
                (
                    "is_mandatory",
                    models.BooleanField(default=False, verbose_name="obligatoire"),
                ),
                (
                    "is_visible_by_author",
                    models.BooleanField(
                        default=True, verbose_name="Visible par l'auteur de la demande"
                    ),
                ),
                (
                    "is_visible_by_validators",
                    models.BooleanField(
                        default=False, verbose_name="Visible par les validateurs"
                    ),
                ),
                (
                    "can_always_update",
                    models.BooleanField(
                        default=False,
                        verbose_name="Editable même après classement de la demande",
                    ),
                ),
                (
                    "forms",
                    models.ManyToManyField(
                        related_name="amend_fields",
                        to="forms.Form",
                        verbose_name="formulaires",
                    ),
                ),
                (
                    "integrator",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="auth.group",
                        verbose_name="Groupe des administrateurs",
                    ),
                ),
            ],
            options={
                "verbose_name": "2.2 Configuration du champ de traitement des demandes",
                "verbose_name_plural": "2.2 Configuration des champs de traitement des demandes",
            },
        ),
        migrations.CreateModel(
            name="SubmissionComplementaryDocument",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "document",
                    geocity.apps.submissions.fields.ComplementaryDocumentFileField(
                        storage=geocity.fields.PrivateFileSystemStorage(),
                        upload_to="",
                        verbose_name="Document",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, verbose_name="Description du document"
                    ),
                ),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "Provisoire"),
                            (1, "Final"),
                            (2, "Autre"),
                            (3, "Annulé"),
                        ],
                        verbose_name="Statut du document",
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(default=False, verbose_name="Public"),
                ),
                (
                    "authorised_departments",
                    models.ManyToManyField(
                        related_name="complementary_documents",
                        to="accounts.PermitDepartment",
                        verbose_name="Département autorisé à visualiser le document",
                    ),
                ),
                (
                    "document_type",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="complementary_documents",
                        to="submissions.complementarydocumenttype",
                        verbose_name="Type du document",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="complementary_documents",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Propriétaire du document",
                    ),
                ),
                (
                    "submission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="complementary_documents",
                        to="submissions.submission",
                        verbose_name="Demande",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ArchivedSubmission",
            fields=[
                ("archived_date", models.DateTimeField(auto_now_add=True)),
                (
                    "submission",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="submissions.submission",
                    ),
                ),
                (
                    "archive",
                    geocity.apps.submissions.fields.ArchiveDocumentFileField(
                        storage=geocity.apps.submissions.fields.ArchiveFileSystemStorage(),
                        upload_to=geocity.apps.submissions.fields.archive_upload_to,
                        verbose_name="Archive",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SubmissionInquiry",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                (
                    "documents",
                    models.ManyToManyField(
                        blank=True,
                        to="submissions.SubmissionComplementaryDocument",
                        verbose_name="Documents complémentaires",
                    ),
                ),
                (
                    "submission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="submissions.submission",
                        verbose_name="Demande",
                    ),
                ),
                (
                    "submitter",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Demandeur de l'enquête",
                    ),
                ),
            ],
            options={
                "verbose_name": "3.2 Enquête public",
                "verbose_name_plural": "3.2 Enquêtes publics",
            },
        ),
        migrations.CreateModel(
            name="SubmissionGeoTime",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "starts_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date planifiée de début"
                    ),
                ),
                (
                    "ends_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date planifiée de fin"
                    ),
                ),
                (
                    "comment",
                    models.CharField(
                        blank=True, max_length=1024, verbose_name="Commentaire"
                    ),
                ),
                (
                    "external_link",
                    models.URLField(blank=True, verbose_name="Lien externe"),
                ),
                (
                    "comes_from_automatic_geocoding",
                    models.BooleanField(
                        default=False,
                        verbose_name="Géométrie obtenue par géocodage d'adresse",
                    ),
                ),
                (
                    "geom",
                    django.contrib.gis.db.models.fields.GeometryCollectionField(
                        null=True, srid=2056, verbose_name="Localisation"
                    ),
                ),
                (
                    "submission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="geo_time",
                        to="submissions.submission",
                    ),
                ),
            ],
            options={
                "verbose_name": "3.3 Consultation de l'agenda et de la géométrie",
                "verbose_name_plural": "3.3 Consultation des agenda et géométries",
            },
        ),
        migrations.CreateModel(
            name="SubmissionContact",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "contact_type",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (7, "Architecte/Ingénieur"),
                            (6, "Association"),
                            (0, "Autres"),
                            (8, "Direction des travaux"),
                            (3, "Entreprise"),
                            (4, "Maître d'ouvrage"),
                            (2, "Propriétaire"),
                            (1, "Requérant (si différent de l'auteur de la demande)"),
                            (5, "Sécurité"),
                        ],
                        default=0,
                        verbose_name="type de contact",
                    ),
                ),
                (
                    "contact",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="submissions.contact",
                    ),
                ),
                (
                    "submission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="submissions.submission",
                        related_name="submission_contacts",
                    ),
                ),
            ],
            options={
                "verbose_name": "Relation demande-contact",
                "verbose_name_plural": "Relations demande-contact",
            },
        ),
        migrations.CreateModel(
            name="SubmissionAmendFieldValue",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("value", models.TextField(blank=True, verbose_name="traitement info")),
                (
                    "field",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="submissions.submissionamendfield",
                        verbose_name="caractéristique",
                    ),
                ),
                (
                    "form",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="amend_fields",
                        to="submissions.selectedform",
                        verbose_name="formulaire",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="submission",
            name="contacts",
            field=models.ManyToManyField(
                related_name="_submissions_submission_contacts_+",
                through="submissions.SubmissionContact",
                to="submissions.Contact",
            ),
        ),
        migrations.AddField(
            model_name="submission",
            name="forms",
            field=models.ManyToManyField(
                related_name="submissions",
                through="submissions.SelectedForm",
                to="forms.Form",
                verbose_name="Formulaires",
            ),
        ),
        migrations.AddField(
            model_name="selectedform",
            name="submission",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="selected_forms",
                to="submissions.submission",
            ),
        ),
        migrations.CreateModel(
            name="HistoricalSubmissionValidation",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "validation_status",
                    models.IntegerField(
                        choices=[(0, "En attente"), (1, "Approuvé"), (2, "Refusé")],
                        default=0,
                        verbose_name="Statut de validation",
                    ),
                ),
                (
                    "comment_before",
                    models.TextField(
                        blank=True,
                        help_text="Information supplémentaire facultative transmise au requérant",
                        verbose_name="Commentaire (avant)",
                    ),
                ),
                (
                    "comment_during",
                    models.TextField(
                        blank=True,
                        help_text="Information supplémentaire facultative transmise au requérant",
                        verbose_name="Commentaire (pendant)",
                    ),
                ),
                (
                    "comment_after",
                    models.TextField(
                        blank=True,
                        help_text="Information supplémentaire facultative transmise au requérant",
                        verbose_name="Commentaire (après)",
                    ),
                ),
                (
                    "validated_at",
                    models.DateTimeField(null=True, verbose_name="Validé le"),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "department",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="accounts.permitdepartment",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "submission",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="submissions.submission",
                    ),
                ),
                (
                    "validated_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical 3.5 Consultation de la validation par le service",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalSubmissionGeoTime",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "starts_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date planifiée de début"
                    ),
                ),
                (
                    "ends_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date planifiée de fin"
                    ),
                ),
                (
                    "comment",
                    models.CharField(
                        blank=True, max_length=1024, verbose_name="Commentaire"
                    ),
                ),
                (
                    "external_link",
                    models.URLField(blank=True, verbose_name="Lien externe"),
                ),
                (
                    "comes_from_automatic_geocoding",
                    models.BooleanField(
                        default=False,
                        verbose_name="Géométrie obtenue par géocodage d'adresse",
                    ),
                ),
                (
                    "geom",
                    django.contrib.gis.db.models.fields.GeometryCollectionField(
                        null=True, srid=2056, verbose_name="Localisation"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "submission",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="submissions.submission",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical 3.3 Consultation de l'agenda et de la géométrie",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalSubmissionAmendFieldValue",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("value", models.TextField(blank=True, verbose_name="traitement info")),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "field",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="submissions.submissionamendfield",
                        verbose_name="caractéristique",
                    ),
                ),
                (
                    "form",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="submissions.selectedform",
                        verbose_name="formulaire",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical submission amend field value",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalSubmission",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "Brouillon"),
                            (1, "Envoyée, en attente de traitement"),
                            (4, "Demande de compléments"),
                            (3, "En traitement"),
                            (5, "En validation"),
                            (2, "Approuvée"),
                            (6, "Refusée"),
                            (7, "Réceptionnée"),
                            (8, "Consultation publique en cours"),
                            (9, "Archivée"),
                        ],
                        default=0,
                        verbose_name="état",
                    ),
                ),
                (
                    "shortname",
                    models.CharField(
                        blank=True,
                        help_text="Sera affiché dans le calendrier si la demande est rendue tout publique, ex: Brandons (max. 32 caractères)",
                        max_length=32,
                        verbose_name="nom court",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        verbose_name="date de création",
                    ),
                ),
                (
                    "validated_at",
                    models.DateTimeField(null=True, verbose_name="date de validation"),
                ),
                (
                    "intersected_geometries",
                    models.TextField(
                        max_length=1024,
                        null=True,
                        verbose_name="Entités géométriques concernées",
                    ),
                ),
                (
                    "validation_pdf",
                    models.TextField(
                        max_length=100,
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["pdf"]
                            )
                        ],
                        verbose_name="pdf de validation",
                    ),
                ),
                (
                    "creditor_type",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (7, "Architecte/Ingénieur"),
                            (6, "Association"),
                            (0, "Autres"),
                            (8, "Direction des travaux"),
                            (3, "Entreprise"),
                            (4, "Maître d'ouvrage"),
                            (2, "Propriétaire"),
                            (1, "Requérant (si différent de l'auteur de la demande)"),
                            (5, "Sécurité"),
                        ],
                        null=True,
                        verbose_name="Destinataire de la facture",
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False, verbose_name="Publication calendrier"
                    ),
                ),
                (
                    "prolongation_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Nouvelle date de fin"
                    ),
                ),
                (
                    "prolongation_comment",
                    models.TextField(blank=True, verbose_name="Commentaire"),
                ),
                (
                    "prolongation_status",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[(0, "En attente"), (1, "Approuvée"), (2, "Refusée")],
                        null=True,
                        verbose_name="Décision",
                    ),
                ),
                (
                    "additional_decision_information",
                    models.TextField(
                        blank=True,
                        help_text="Facultative, sera transmise au requérant",
                        max_length=2048,
                        verbose_name="Information complémentaire",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "administrative_entity",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="accounts.administrativeentity",
                        verbose_name="entité administrative",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="auteur",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical 3.1 Consultation de la demande",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalFieldValue",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("value", models.JSONField()),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "field",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="forms.field",
                        verbose_name="caractéristique",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "selected_form",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="submissions.selectedform",
                        verbose_name="objet",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical field value",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalContact",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("first_name", models.CharField(max_length=150, verbose_name="Prénom")),
                ("last_name", models.CharField(max_length=100, verbose_name="Nom")),
                (
                    "company_name",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Entreprise"
                    ),
                ),
                (
                    "vat_number",
                    models.CharField(
                        blank=True, max_length=19, verbose_name="Numéro TVA"
                    ),
                ),
                ("address", models.CharField(max_length=100, verbose_name="Adresse")),
                ("zipcode", models.PositiveIntegerField(verbose_name="NPA")),
                ("city", models.CharField(max_length=100, verbose_name="Ville")),
                ("phone", models.CharField(max_length=20, verbose_name="Téléphone")),
                ("email", models.EmailField(max_length=254, verbose_name="Email")),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Contact",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="FieldValue",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("value", models.JSONField()),
                (
                    "field",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="forms.field",
                        verbose_name="caractéristique",
                    ),
                ),
                (
                    "selected_form",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="field_values",
                        to="submissions.selectedform",
                        verbose_name="objet",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ContactType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (7, "Architecte/Ingénieur"),
                            (6, "Association"),
                            (0, "Autres"),
                            (8, "Direction des travaux"),
                            (3, "Entreprise"),
                            (4, "Maître d'ouvrage"),
                            (2, "Propriétaire"),
                            (1, "Requérant (si différent de l'auteur de la demande)"),
                            (5, "Sécurité"),
                        ],
                        default=0,
                        verbose_name="type de contact",
                    ),
                ),
                (
                    "is_mandatory",
                    models.BooleanField(default=True, verbose_name="obligatoire"),
                ),
                (
                    "form_category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contact_types",
                        to="forms.formcategory",
                        verbose_name="type de demande",
                    ),
                ),
                (
                    "integrator",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="auth.group",
                        verbose_name="Groupe des administrateurs",
                    ),
                ),
            ],
            options={
                "verbose_name": "1.6 Configuration du contact",
                "verbose_name_plural": "1.6 Configuration des contacts",
            },
        ),
        migrations.CreateModel(
            name="SubmissionWorkflowStatus",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "Brouillon"),
                            (1, "Envoyée, en attente de traitement"),
                            (4, "Demande de compléments"),
                            (3, "En traitement"),
                            (5, "En validation"),
                            (2, "Approuvée"),
                            (6, "Refusée"),
                            (7, "Réceptionnée"),
                            (8, "Consultation publique en cours"),
                            (9, "Archivée"),
                        ],
                        verbose_name="statut",
                    ),
                ),
                (
                    "administrative_entity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="enabled_statuses",
                        to="accounts.administrativeentity",
                    ),
                ),
            ],
            options={
                "verbose_name": "Status disponible pour l'entité administrative",
                "verbose_name_plural": "Status disponibles pour l'entité administratives",
                "unique_together": {("status", "administrative_entity")},
            },
        ),
        migrations.CreateModel(
            name="SubmissionValidation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "validation_status",
                    models.IntegerField(
                        choices=[(0, "En attente"), (1, "Approuvé"), (2, "Refusé")],
                        default=0,
                        verbose_name="Statut de validation",
                    ),
                ),
                (
                    "comment_before",
                    models.TextField(
                        blank=True,
                        help_text="Information supplémentaire facultative transmise au requérant",
                        verbose_name="Commentaire (avant)",
                    ),
                ),
                (
                    "comment_during",
                    models.TextField(
                        blank=True,
                        help_text="Information supplémentaire facultative transmise au requérant",
                        verbose_name="Commentaire (pendant)",
                    ),
                ),
                (
                    "comment_after",
                    models.TextField(
                        blank=True,
                        help_text="Information supplémentaire facultative transmise au requérant",
                        verbose_name="Commentaire (après)",
                    ),
                ),
                (
                    "validated_at",
                    models.DateTimeField(null=True, verbose_name="Validé le"),
                ),
                (
                    "department",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submission_validations",
                        to="accounts.permitdepartment",
                    ),
                ),
                (
                    "submission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="validations",
                        to="submissions.submission",
                    ),
                ),
                (
                    "validated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "3.5 Consultation de la validation par le service",
                "verbose_name_plural": "3.5 Consultation des validations par les services",
                "unique_together": {("submission", "department")},
            },
        ),
        migrations.AddIndex(
            model_name="submissiongeotime",
            index=models.Index(
                fields=["starts_at"], name="submissions_starts__fdc64a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="submissiongeotime",
            index=models.Index(
                fields=["ends_at"], name="submissions_ends_at_b85e4f_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="submissionamendfieldvalue",
            unique_together={("field", "form")},
        ),
        migrations.AddIndex(
            model_name="submission",
            index=models.Index(
                fields=["created_at"], name="submissions_created_d3a853_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="selectedform",
            unique_together={("submission", "form")},
        ),
        migrations.AlterUniqueTogether(
            name="fieldvalue",
            unique_together={("field", "selected_form")},
        ),
        migrations.AlterUniqueTogether(
            name="contacttype",
            unique_together={("type", "form_category")},
        ),
        migrations.AddConstraint(
            model_name="complementarydocumenttype",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("parent__isnull", False), ("form__isnull", True)),
                    models.Q(("parent__isnull", True), ("form__isnull", False)),
                    _connector="OR",
                ),
                name="complementary_document_type_restrict_form_link_to_parents",
            ),
        ),
        migrations.AddField(
            model_name="archivedsubmission",
            name="archivist",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
                verbose_name="Personne ayant archivé la demande",
            ),
        ),
    ]
