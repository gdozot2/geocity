# Generated by Django 3.2.15 on 2022-10-13 13:35

from django.db import migrations
from django.db.models import F, Q

from geocity.migrations import (
    bulk_create,
    common_fields_values,
    copy_model,
    migrate_contenttypes,
    migrate_permissions,
    sync_sequence,
)


def create_complementary_document_types(apps, schema_editor):
    ComplementaryDocumentType = apps.get_model("permits", "ComplementaryDocumentType")
    SubmissionsComplementaryDocumentType = apps.get_model(
        "submissions", "ComplementaryDocumentType"
    )

    def complementary_document_types():
        for (
            complementary_document_type
        ) in ComplementaryDocumentType.objects.all().order_by(
            F("parent").asc(nulls_first=True)
        ):
            values = common_fields_values(
                SubmissionsComplementaryDocumentType, complementary_document_type
            )
            yield SubmissionsComplementaryDocumentType(
                **values, form_id=complementary_document_type.work_object_types_id
            )

    def reports_through():
        for reports_through in ComplementaryDocumentType.reports.through.objects.all():
            values = common_fields_values(
                SubmissionsComplementaryDocumentType.administrative_entities.through,
                reports_through,
            )
            values["form_id"] = reports_through.worksobjecttype_id
            yield SubmissionsComplementaryDocumentType.reports.through(**values)

    bulk_create(complementary_document_types())
    bulk_create(reports_through())


def create_contact_types(apps, schema_editor):
    PermitActorType = apps.get_model("permits", "PermitActorType")
    ContactType = apps.get_model("submissions", "ContactType")

    def contact_types():
        for permit_actor_type in PermitActorType.objects.all():
            values = common_fields_values(ContactType, permit_actor_type)

            yield ContactType(
                **values, form_category_id=permit_actor_type.works_type_id
            )

    bulk_create(contact_types())


def create_contacts(apps, schema_editor):
    PermitActor = apps.get_model("permits", "PermitActor")
    Contact = apps.get_model("submissions", "Contact")

    copy_model(PermitActor, Contact)


def create_historical_contacts(apps, schema_editor):
    HistoricalPermitActor = apps.get_model("permits", "HistoricalPermitActor")
    HistoricalContact = apps.get_model("submissions", "HistoricalContact")

    copy_model(HistoricalPermitActor, HistoricalContact)


def create_geom_layers(apps, schema_editor):
    PermitsGeomLayer = apps.get_model("permits", "PermitActor")
    GeomLayer = apps.get_model("submissions", "GeomLayer")

    copy_model(PermitsGeomLayer, GeomLayer)


def create_submissions(apps, schema_editor):
    PermitRequest = apps.get_model("permits", "PermitRequest")
    Submission = apps.get_model("submissions", "Submission")

    def submissions():
        for permit_request in PermitRequest.objects.select_related("author"):
            values = common_fields_values(Submission, permit_request)
            # author used to point to PermitAuthor which is now UserProfile. It now points
            # to User
            values["author_id"] = (
                permit_request.author.user_id if permit_request.author_id else None
            )

            yield Submission(**values)

    bulk_create(submissions())


def create_historical_submissions(apps, schema_editor):
    HistoricalPermitRequest = apps.get_model("permits", "HistoricalPermitRequest")
    HistoricalSubmission = apps.get_model("submissions", "HistoricalSubmission")

    def historical_submissions():
        for permit_request in HistoricalPermitRequest.objects.select_related("author"):
            values = common_fields_values(HistoricalSubmission, permit_request)
            # author used to point to PermitAuthor which is now UserProfile. It now points
            # to User
            values["author_id"] = (
                permit_request.author.user_id if permit_request.author else None
            )

            yield HistoricalSubmission(**values)

    bulk_create(historical_submissions())


def create_selected_forms(apps, schema_editor):
    WorksObjectTypeChoice = apps.get_model("permits", "WorksObjectTypeChoice")
    SelectedForm = apps.get_model("submissions", "SelectedForm")

    def selected_forms():
        for works_object_type_choice in WorksObjectTypeChoice.objects.all():
            yield SelectedForm(
                id=works_object_type_choice.id,
                form_id=works_object_type_choice.works_object_type_id,
                submission_id=works_object_type_choice.permit_request_id,
            )

    bulk_create(selected_forms())


def create_submission_amend_fields(apps, schema_editor):
    PermitRequestAmendProperty = apps.get_model("permits", "PermitRequestAmendProperty")
    SubmissionAmendField = apps.get_model("submissions", "SubmissionAmendField")

    def submission_amend_fields():
        for permit_request_amend_property in PermitRequestAmendProperty.objects.all():
            yield SubmissionAmendField(
                **common_fields_values(
                    SubmissionAmendField, permit_request_amend_property
                )
            )

    def submission_amend_field_forms():
        for (
            forms_through
        ) in PermitRequestAmendProperty.works_object_types.through.objects.all():
            values = common_fields_values(
                SubmissionAmendField.forms.through, forms_through
            )
            values[
                "submissionamendfield_id"
            ] = forms_through.permitrequestamendproperty_id
            values["form_id"] = forms_through.worksobjecttype_id
            yield SubmissionAmendField.forms.through(**values)

    bulk_create(submission_amend_fields())
    bulk_create(submission_amend_field_forms())


def create_submission_amend_field_values(apps, schema_editor):
    PermitRequestAmendPropertyValue = apps.get_model(
        "permits", "PermitRequestAmendPropertyValue"
    )
    SubmissionAmendFieldValue = apps.get_model(
        "submissions", "SubmissionAmendFieldValue"
    )

    def submission_amend_field_values():
        for (
            permit_request_amend_property_value
        ) in PermitRequestAmendPropertyValue.objects.all():
            yield SubmissionAmendFieldValue(
                **common_fields_values(
                    SubmissionAmendFieldValue, permit_request_amend_property_value
                ),
                field_id=permit_request_amend_property_value.property_id,
                form_id=permit_request_amend_property_value.works_object_type_choice_id,
            )

    bulk_create(submission_amend_field_values())


def create_historical_submission_amend_field_values(apps, schema_editor):
    HistoricalPermitRequestAmendPropertyValue = apps.get_model(
        "permits", "HistoricalPermitRequestAmendPropertyValue"
    )
    HistoricalSubmissionAmendFieldValue = apps.get_model(
        "submissions", "HistoricalSubmissionAmendFieldValue"
    )

    def historical_submission_amend_field_values():
        for (
            permit_request_amend_property_value
        ) in HistoricalPermitRequestAmendPropertyValue.objects.all():
            yield HistoricalSubmissionAmendFieldValue(
                **common_fields_values(
                    HistoricalSubmissionAmendFieldValue,
                    permit_request_amend_property_value,
                ),
                field_id=permit_request_amend_property_value.property_id,
                form_id=permit_request_amend_property_value.works_object_type_choice_id,
            )

    bulk_create(historical_submission_amend_field_values())


def create_submission_complementary_documents(apps, schema_editor):
    PermitRequestComplementaryDocument = apps.get_model(
        "permits", "PermitRequestComplementaryDocument"
    )
    SubmissionComplementaryDocument = apps.get_model(
        "submissions", "SubmissionComplementaryDocument"
    )

    def submission_complementary_documents():
        for (
            permit_request_complementary_document
        ) in PermitRequestComplementaryDocument.objects.all():
            yield SubmissionComplementaryDocument(
                **common_fields_values(
                    SubmissionComplementaryDocument,
                    permit_request_complementary_document,
                ),
                submission_id=permit_request_complementary_document.permit_request_id,
            )

    def submission_complementary_documents_authorised_departments():
        for (
            authorised_department_through
        ) in (
            PermitRequestComplementaryDocument.authorised_departments.through.objects.all()
        ):
            values = common_fields_values(
                SubmissionComplementaryDocument.authorised_departments.through,
                authorised_department_through,
            )
            values[
                "submissioncomplementarydocument_id"
            ] = authorised_department_through.permitrequestcomplementarydocument_id
            yield SubmissionComplementaryDocument.authorised_departments.through(
                **values
            )

    bulk_create(submission_complementary_documents())
    bulk_create(submission_complementary_documents_authorised_departments())


def create_archived_submissions(apps, schema_editor):
    ArchivedPermitRequest = apps.get_model("permits", "ArchivedPermitRequest")
    ArchivedSubmission = apps.get_model("submissions", "ArchivedSubmission")

    def archived_submissions():
        for archived_permit_request in ArchivedPermitRequest.objects.all():
            yield ArchivedSubmission(
                **common_fields_values(ArchivedSubmission, archived_permit_request),
                submission_id=archived_permit_request.permit_request_id,
            )

    bulk_create(archived_submissions())


def create_submission_inquiries(apps, schema_editor):
    PermitRequestInquiry = apps.get_model("permits", "PermitRequestInquiry")
    SubmissionInquiry = apps.get_model("submissions", "SubmissionInquiry")

    def submission_inquiries():
        for permit_request_inquiry in PermitRequestInquiry.objects.all():
            yield SubmissionInquiry(
                **common_fields_values(SubmissionInquiry, permit_request_inquiry),
                submission_id=permit_request_inquiry.permit_request_id,
            )

    def submission_inquiries_documents():
        for document_through in PermitRequestInquiry.documents.through.objects.all():
            values = common_fields_values(
                SubmissionInquiry.documents.through,
                document_through,
            )
            values[
                "submissioncomplementarydocument_id"
            ] = document_through.permitrequestcomplementarydocument_id
            values["submissioninquiry_id"] = document_through.permitrequestinquiry_id
            yield SubmissionInquiry.documents.through(**values)

    bulk_create(submission_inquiries())
    bulk_create(submission_inquiries_documents())


def create_submission_geo_times(apps, schema_editor):
    PermitRequestGeoTime = apps.get_model("permits", "PermitRequestGeoTime")
    SubmissionGeoTime = apps.get_model("submissions", "SubmissionGeoTime")

    def submission_geo_times():
        for permit_request_geo_time in PermitRequestGeoTime.objects.all():
            yield SubmissionGeoTime(
                **common_fields_values(SubmissionGeoTime, permit_request_geo_time),
                submission_id=permit_request_geo_time.permit_request_id,
            )

    bulk_create(submission_geo_times())


def create_historical_submission_geo_times(apps, schema_editor):
    HistoricalPermitRequestGeoTime = apps.get_model(
        "permits", "HistoricalPermitRequestGeoTime"
    )
    HistoricalSubmissionGeoTime = apps.get_model(
        "submissions", "HistoricalSubmissionGeoTime"
    )

    def historical_submission_geo_times():
        for permit_request_geo_time in HistoricalPermitRequestGeoTime.objects.all():
            yield HistoricalSubmissionGeoTime(
                **common_fields_values(
                    HistoricalSubmissionGeoTime, permit_request_geo_time
                ),
                submission_id=permit_request_geo_time.permit_request_id,
            )

    bulk_create(historical_submission_geo_times())


def create_submission_contacts(apps, schema_editor):
    PermitRequestActor = apps.get_model("permits", "PermitRequestActor")
    SubmissionContact = apps.get_model("submissions", "SubmissionContact")

    def submission_contacts():
        for permit_request_actor in PermitRequestActor.objects.all():
            yield SubmissionContact(
                id=permit_request_actor.id,
                submission_id=permit_request_actor.permit_request_id,
                contact_id=permit_request_actor.actor_id,
                contact_type=permit_request_actor.actor_type,
            )

    bulk_create(submission_contacts())


def create_submission_validations(apps, schema_editor):
    PermitRequestValidation = apps.get_model("permits", "PermitRequestValidation")
    SubmissionValidation = apps.get_model("submissions", "SubmissionValidation")

    def submission_validations():
        for permit_request_geo_time in PermitRequestValidation.objects.all():
            yield SubmissionValidation(
                **common_fields_values(SubmissionValidation, permit_request_geo_time),
                submission_id=permit_request_geo_time.permit_request_id,
            )

    bulk_create(submission_validations())


def create_historical_submission_validations(apps, schema_editor):
    HistoricalPermitRequestValidation = apps.get_model(
        "permits", "HistoricalPermitRequestValidation"
    )
    HistoricalSubmissionValidation = apps.get_model(
        "submissions", "HistoricalSubmissionValidation"
    )

    def historical_submission_validations():
        for permit_request_geo_time in HistoricalPermitRequestValidation.objects.all():
            yield HistoricalSubmissionValidation(
                **common_fields_values(
                    HistoricalSubmissionValidation, permit_request_geo_time
                ),
                submission_id=permit_request_geo_time.permit_request_id,
            )

    bulk_create(historical_submission_validations())


def create_field_values(apps, schema_editor):
    WorksObjectPropertyValue = apps.get_model("permits", "WorksObjectPropertyValue")
    FieldValue = apps.get_model("submissions", "FieldValue")

    def field_values():
        for works_object_property_value in WorksObjectPropertyValue.objects.all():
            yield FieldValue(
                **common_fields_values(FieldValue, works_object_property_value),
                selected_form_id=works_object_property_value.works_object_type_choice_id,
                field_id=works_object_property_value.property_id,
            )

    bulk_create(field_values())


def create_historical_field_values(apps, schema_editor):
    HistoricalWorksObjectPropertyValue = apps.get_model(
        "permits", "HistoricalWorksObjectPropertyValue"
    )
    HistoricalFieldValue = apps.get_model("submissions", "HistoricalFieldValue")

    def historical_field_values():
        for (
            works_object_property_value
        ) in HistoricalWorksObjectPropertyValue.objects.all():
            yield HistoricalFieldValue(
                **common_fields_values(
                    HistoricalFieldValue, works_object_property_value
                ),
                selected_form_id=works_object_property_value.works_object_type_choice_id,
                field_id=works_object_property_value.property_id,
            )

    bulk_create(historical_field_values())


def create_submission_workflow_statuses(apps, schema_editor):
    PermitWorkflowStatus = apps.get_model("permits", "PermitWorkflowStatus")
    SubmissionWorkflowStatus = apps.get_model("submissions", "SubmissionWorkflowStatus")

    copy_model(PermitWorkflowStatus, SubmissionWorkflowStatus)


def create_assigned_permissions(apps, schema_editor):
    Permission = apps.get_model("auth", "Permission")
    Group = apps.get_model("auth", "Group")
    User = apps.get_model("auth", "User")

    permissions_mapping = {
        "amend_permit_request": "amend_submission",
        "validate_permit_request": "validate_submission",
        "classify_permit_request": "classify_submission",
        "edit_permit_request": "edit_submission",
    }

    permissions_filter = Q()
    for old_perm_codename, new_perm_codename in permissions_mapping.items():
        permissions_filter |= Q(
            codename=old_perm_codename,
            content_type__app_label="permits",
            content_type__model="permitrequest",
        ) | Q(
            codename=new_perm_codename,
            content_type__app_label="submissions",
            content_type__model="submission",
        )

    permissions = Permission.objects.filter(permissions_filter).select_related(
        "content_type"
    )
    old_permissions_by_codename = {
        permission.codename: permission
        for permission in permissions
        if permission.content_type.app_label == "permits"
    }
    new_permissions_by_codename = {
        permission.codename: permission
        for permission in permissions
        if permission.content_type.app_label == "submissions"
    }

    for group_permission in Group.permissions.through.objects.filter(
        permission__in=old_permissions_by_codename.values()
    ).select_related("permission"):
        Group.permissions.through.objects.create(
            group_id=group_permission.group_id,
            permission_id=new_permissions_by_codename[
                permissions_mapping[group_permission.permission.codename]
            ].pk,
        )

    for user_permission in User.user_permissions.through.objects.filter(
        permission__in=old_permissions_by_codename.values()
    ).select_related("permission"):
        User.permissions.through.objects.create(
            user_id=user_permission.user_id,
            permission_id=new_permissions_by_codename[
                permissions_mapping[user_permission.permission.codename]
            ].pk,
        )


class Migration(migrations.Migration):

    dependencies = [
        ("submissions", "0002_submission_ends_at_starts_at"),
        ("accounts", "0003_migrate_permits_data"),
        ("forms", "0003_migrate_permits_data"),
    ]

    operations = [
        migrations.RunPython(migrate_contenttypes),
        migrations.RunPython(migrate_permissions),
        migrations.RunPython(create_complementary_document_types),
        sync_sequence("submissions_complementarydocumenttype"),
        sync_sequence("submissions_complementarydocumenttype_reports"),
        migrations.RunPython(create_contact_types),
        sync_sequence("submissions_contacttype"),
        migrations.RunPython(create_contacts),
        sync_sequence("submissions_contact"),
        migrations.RunPython(create_historical_contacts),
        sync_sequence("submissions_historicalcontact", "history_id"),
        migrations.RunPython(create_geom_layers),
        sync_sequence("submissions_geomlayer"),
        migrations.RunPython(create_submissions),
        sync_sequence("submissions_submission"),
        migrations.RunPython(create_historical_submissions),
        sync_sequence("submissions_historicalsubmission", "history_id"),
        migrations.RunPython(create_selected_forms),
        sync_sequence("submissions_selectedform"),
        migrations.RunPython(create_submission_amend_fields),
        sync_sequence("submissions_submissionamendfield"),
        sync_sequence("submissions_submissionamendfield_forms"),
        migrations.RunPython(create_submission_amend_field_values),
        sync_sequence("submissions_submissionamendfieldvalue"),
        migrations.RunPython(create_historical_submission_amend_field_values),
        sync_sequence("submissions_historicalsubmissionamendfieldvalue", "history_id"),
        migrations.RunPython(create_submission_complementary_documents),
        sync_sequence("submissions_submissioncomplementarydocument"),
        sync_sequence(
            "submissions_submissioncomplementarydocument_authorised_depadd2d"
        ),
        # No need to sync the sequence here since `ArchivedSubmission.submission` is the PK
        migrations.RunPython(create_archived_submissions),
        migrations.RunPython(create_submission_inquiries),
        sync_sequence("submissions_submissioninquiry"),
        sync_sequence("submissions_submissioninquiry_documents"),
        migrations.RunPython(create_submission_geo_times),
        sync_sequence("submissions_submissiongeotime"),
        migrations.RunPython(create_historical_submission_geo_times),
        sync_sequence("submissions_historicalsubmissiongeotime", "history_id"),
        migrations.RunPython(create_submission_contacts),
        sync_sequence("submissions_submissioncontact"),
        migrations.RunPython(create_submission_validations),
        sync_sequence("submissions_submissionvalidation"),
        migrations.RunPython(create_historical_submission_validations),
        sync_sequence("submissions_historicalsubmissionvalidation", "history_id"),
        migrations.RunPython(create_field_values),
        sync_sequence("submissions_fieldvalue"),
        migrations.RunPython(create_historical_field_values),
        sync_sequence("submissions_historicalfieldvalue", "history_id"),
        migrations.RunPython(create_submission_workflow_statuses),
        sync_sequence("submissions_submissionworkflowstatus"),
        migrations.RunPython(create_assigned_permissions),
    ]
